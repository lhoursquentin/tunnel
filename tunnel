#! /bin/sh

[ -n "$ZSH_VERSION" ] && setopt +o nomatch # Remove glob errors if zsh is used

conf_file=~/.tunnel

parse()
{
  eval "$1=$(sed -n 's/'"$1"'[[:space:]]*=[[:space:]]*\(.*\)/\1/p' "$2")"
}

check_active_tunnels()
{
  ls /tmp/tunnel-*.cfg > /dev/null 2>&1 && return 0

  echo 'No active tunnel' >&2
  return 1
}

check_status()
{
  for file in /tmp/tunnel-${2:-*}.cfg; do
    [ ! -f "$file" ] && return 1
    parse local_port "$file"
    parse distant_port "$file"
    parse target "$file"
    nc -z 127.0.0.1 "$local_port"
    "$1" "$?" "$local_port" "$distant_port"
  done
}

print_status()
{
  printf 'tunnel: %s -> %s (%s)' "$local_port" "$distant_port" "$target"
  if [ "$1" -eq 0 ]; then
    printf '\033[0;32m OK'
  else
    printf '\033[0;31m KO'
  fi
  printf '\033[0m\n'
}

stop_tunnel()
{
  [ -f /tmp/tunnel-"$1".cfg ] && {
    parse pid /tmp/tunnel-"$1".cfg
    if [ "$(ps -p "$pid" -o comm=)" = 'ssh' ]; then
      kill "$pid"
    fi
  }
}

create_ssh_tunnel()
{
  if [ "$1" -ne 0 ]; then
    stop_tunnel "$2"
    if ! ssh -fNL "$2:$target:$3" -p "$ssh_port" "$user"@"$address" >> /tmp/tunnel-"$2".log 2>&1; then
      printf '\033[0;31mError\033[0m\n - Failed to create tunnel\n' >&2
      cat /tmp/tunnel-"$2".log >&2
      return 1
    fi
    printf 'local_port=%s\ndistant_port=%s\ntarget=%s\n' "$2" "$3" "$target" > /tmp/tunnel-"$2".cfg
    ps_ouput="$(ps aux)"
    pid="$(printf '%s\n' "$ps_ouput" | sed -n 's/[^[:space:]]*[[:space:]]*\([^[:space:]]*\).*ssh -fNL '"$2"'.*/\1/p')"
    printf 'pid=%s\n' "$pid" >> /tmp/tunnel-"$2".cfg
  fi
}

clean()
{
  if [ "$1" -ne 0 ]; then
    stop_tunnel "$2" && rm /tmp/tunnel-"$2".*
  fi
}

if [ -f "$conf_file" ]; then
  parse address "$conf_file"
  parse ssh_port "$conf_file"
  parse user  "$conf_file"
  parse target  "$conf_file"
  : ${target:=localhost}
else
  printf 'Enter the ssh address\n> '
  read address
  printf 'Enter the ssh address port (default 22)\n> '
  read ssh_port
  : "${ssh_port:=22}"
  printf 'Enter the ssh address user (default %s)\n> ' "$USER"
  read user
  : "${user:=$USER}"
  printf 'Enter the tunnel target\n> '
  read target
  printf 'address=%s
ssh_port=%s
user=%s
target=%s
' "$address" "$ssh_port" "$user" "$target" > ~/.tunnel
  echo
fi

if [ "$#" -lt 1 ]; then
  if check_active_tunnels; then
    check_status print_status
  fi
else
  case "$1" in
    stop|s)
      if [ -z "$2" ]; then
        for file in /tmp/tunnel-*.cfg; do
          parse local_port "$file"
          stop_tunnel "$local_port"
        done
      else
        stop_tunnel "$2"
      fi
      ;;
    restart|r)
      check_status create_ssh_tunnel "$2"
      ;;
    clean|c)
      check_status clean "$2"
      ;;
    config|cfg)
      ${EDITOR:-vi} ~/.tunnel
      ;;
    help|h|--help|-h)
      echo 'Usage: tunnel [options]

Displays tunnels status when launched with no options.

Options:

  local-port  distant-port     creates a tunnel from your your ssh address on distant-port to localhost on local-port
  stop, s     [local-port]     stops local-port tunnel or all tunnels if no port is specified
  clean, c    [local-port]     removes local-port tunnel if stopped or all stopped tunnels if no port is specified
  restart, r  [local-port]     restarts local-port tunnel if stopped or all stopped tunnels if no port is specified
  config, cfg                  opens the configuration file with your default editor
'
      ;;
    *)
      if [ "$#" -eq 2 ] && [ "$1" -gt 0 ] && [ "$2" -gt 0 ]; then
        create_ssh_tunnel 1 "$1" "$2"
      else
        echo 'tunnel: Invalid Command' >&2
        exit 1
      fi
      ;;
  esac
fi
